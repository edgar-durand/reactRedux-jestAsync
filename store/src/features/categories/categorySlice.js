import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import http from '../../api-client/http-client';

const initialState = {
  categories: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchCategories = createAsyncThunk(
  'category/fetch',
  async () => {
    const response = await http.get(`categories`);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const deleteCategory = createAsyncThunk(
  'category/delete',
  async (id) => {
    const response = await http.delete(`categories/${id}`);
    // The value we return becomes the `fulfilled` action payload
    if (response.result && !response.error)
      return { id }
  }
);

export const addCategory = createAsyncThunk(
  'category/add',
  async (category) => {
    const response = await http.post(`categories`, category);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const updateCategory = createAsyncThunk(
  'category/update',
  async (toUpdate) => {
    const response = await http.patch(`categories/${toUpdate.id}`, toUpdate);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const categorySlice = createSlice({
  name: 'category',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchCategories.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchCategories.fulfilled, (state, action) => {
        state.status = 'idle';
        state.categories = action.payload;
      })
      .addCase(deleteCategory.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteCategory.fulfilled, (state, action) => {
        state.status = 'idle';
        if (action.payload?.id) {
          const toDelete = action.payload;
          const index = state.categories.findIndex(cat => cat.id === toDelete.id);
          
          // Redux Toolkit allows us to write "mutating" logic in reducers. It
          // doesn't actually mutate the state because it uses the Immer library,
          // which detects changes to a "draft state" and produces a brand new
          // immutable state based off those changes
          state.categories.splice(index, 1);
        }
      })
      .addCase(addCategory.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addCategory.fulfilled, (state, action) => {
        state.status = 'idle';
        state.Categories.push(action.payload)
      })
      .addCase(updateCategory.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateCategory.fulfilled, (state, action) => {
        state.status = 'idle';
        state.categories = state.categories.map(cat => {
          if (action.payload.id === cat.id) {
            return { ...cat, ...action.payload }
          }
          return cat
        })
      })
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCategories = (state) => state.category.categories;

export default categorySlice.reducer;