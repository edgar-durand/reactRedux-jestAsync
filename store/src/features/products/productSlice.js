import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import http from '../../api-client/http-client';

const initialState = {
  products: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchProducts = createAsyncThunk(
  'product/fetch',
  async () => {
    const response = await http.get(`products`);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const deleteProduct = createAsyncThunk(
  'product/delete',
  async (id) => {
    const response = await http.delete(`products/${id}`);
    // The value we return becomes the `fulfilled` action payload
    if (response.result && !response.error)
      return { id }
  }
);

export const addProduct = createAsyncThunk(
  'product/add',
  async (product) => {
    const response = await http.post(`products`, product);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const updateProduct = createAsyncThunk(
  'product/update',
  async (toUpdate) => {
    console.log(toUpdate);
    const response = await http.patch(`products/${toUpdate.id}`, toUpdate);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const productSlice = createSlice({
  name: 'product',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchProducts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload;
      })
      .addCase(deleteProduct.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteProduct.fulfilled, (state, action) => {
        state.status = 'idle';
        if (action.payload?.id) {
          const toDelete = action.payload;
          const index = state.products.findIndex(prod => prod.id === toDelete.id);

          // Redux Toolkit allows us to write "mutating" logic in reducers. It
          // doesn't actually mutate the state because it uses the Immer library,
          // which detects changes to a "draft state" and produces a brand new
          // immutable state based off those changes
          state.products.splice(index, 1);
        }

      })
      .addCase(addProduct.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addProduct.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products.push(action.payload)
      })
      .addCase(updateProduct.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateProduct.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = state.products.map(prod => {
          if (action.payload.id === prod.id) {
            return { ...prod, ...action.payload }
          }
          return prod
        })
      })
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProducts = (state) => state.product.products;

export default productSlice.reducer;
